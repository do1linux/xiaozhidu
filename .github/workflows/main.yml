# .github/workflows/deploy-mcp.yml
name: Deploy MCP Music Player Service

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy-service:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set Up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # -------------------
      # 1. 修复系统依赖安装
      # -------------------
      - name: Install System Dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            libgirepository1.0-dev \
            libgtk-3-dev \
            libcairo2-dev \
            python3-dev \
            libxml2-dev \
            portaudio19-dev  # 音频支持

      # -------------------
      # 2. 安装Python依赖
      # -------------------
      - name: Install Python Dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt --force-reinstall

      # -------------------
      # 3. 注入环境变量
      # -------------------
      - name: Inject Environment Variables
        run: |
          echo "MCP_WSS_TOKEN=${{ secrets.MCP_WSS_TOKEN }}" >> $GITHUB_ENV
          echo "MUSIC_API_KEY=${{ secrets.MUSIC_API_KEY }}" >> $GITHUB_ENV

      # -------------------
      # 4. 启动MCP服务（添加id以便后续引用）
      # -------------------
      - name: Start MCP Service
        id: start-service
        run: |
          # 使用虚拟音频设备（针对无头环境）
          export DISPLAY=:0
          
          # 启动服务
          nohup python music_player.py > music_player.log 2>&1 &
          echo "服务启动中，等待15秒..."
          sleep 15
          
          # 检查进程
          if pgrep -f "python music_player.py" > /dev/null; then
            echo "✅ MCP服务已成功启动！"
            echo "service-status=running" >> $GITHUB_OUTPUT
          else
            echo "❌ MCP服务启动失败！"
            echo "service-status=failed" >> $GITHUB_OUTPUT
            echo "=== 服务日志 ==="
            tail -n 100 music_player.log
            echo "=== 进程检查 ==="
            ps aux | grep python
            exit 1
          fi

      # -------------------
      # 5. 上传日志文件
      # -------------------
      - name: Upload Service Logs
        uses: actions/upload-artifact@v4
        with:
          name: music-player-logs
          path: music_player.log
          if-no-files-found: error

      # -------------------
      # 6. 验证服务状态
      # -------------------
      - name: Verify Service Health
        if: steps.start-service.outputs.service-status == 'running'
        run: |
          echo "🔍 检查服务健康状态..."
          # 检查日志中是否有成功标识
          if grep -q "🚀 启动服务，连接到MCP端点" music_player.log; then
            echo "🟢 服务健康检查通过！"
            echo "=== 最新日志 ==="
            tail -n 20 music_player.log
          else
            echo "🔴 服务健康检查失败！"
            echo "=== 错误日志 ==="
            tail -n 50 music_player.log
            exit 1
          fi
